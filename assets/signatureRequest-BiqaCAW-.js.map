{"version":3,"file":"signatureRequest-BiqaCAW-.js","sources":["../../src/stores/signatureRequest.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref } from 'vue'\nimport type { SignatureRequest, ApiResponse } from '@/types'\n\nexport const useSignatureRequestStore = defineStore('signatureRequest', () => {\n  const requests = ref<SignatureRequest[]>([])\n  const currentRequest = ref<SignatureRequest | null>(null)\n  const isLoading = ref(false)\n  const error = ref<string | null>(null)\n\n  const createRequest = async (formData: FormData): Promise<SignatureRequest> => {\n    isLoading.value = true\n    error.value = null\n\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/requests`, {\n        method: 'POST',\n        body: formData,\n      })\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      const result: ApiResponse<SignatureRequest> = await response.json()\n      \n      if (!result.success || !result.data) {\n        throw new Error(result.error || 'Failed to create request')\n      }\n\n      currentRequest.value = result.data\n      requests.value.push(result.data)\n      \n      return result.data\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Unknown error occurred'\n      throw err\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const fetchRequestStatus = async (referenceTransaction: string): Promise<SignatureRequest> => {\n    isLoading.value = true\n    error.value = null\n\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/requests/${referenceTransaction}/status`)\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      const result: ApiResponse<SignatureRequest> = await response.json()\n      \n      if (!result.success || !result.data) {\n        throw new Error(result.error || 'Failed to fetch request status')\n      }\n\n      currentRequest.value = result.data\n      \n      return result.data\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Unknown error occurred'\n      throw err\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const clearError = () => {\n    error.value = null\n  }\n\n  const clearCurrentRequest = () => {\n    currentRequest.value = null\n  }\n\n  return {\n    requests,\n    currentRequest,\n    isLoading,\n    error,\n    createRequest,\n    fetchRequestStatus,\n    clearError,\n    clearCurrentRequest,\n  }\n})\n"],"names":["useSignatureRequestStore","defineStore","requests","ref","currentRequest","isLoading","error","formData","response","result","err","referenceTransaction"],"mappings":"+CAIO,MAAMA,EAA2BC,EAAY,mBAAoB,IAAM,CAC5E,MAAMC,EAAWC,EAAwB,EAAE,EACrCC,EAAiBD,EAA6B,IAAI,EAClDE,EAAYF,EAAI,EAAK,EACrBG,EAAQH,EAAmB,IAAI,EAsErC,MAAO,CACL,SAAAD,EACA,eAAAE,EACA,UAAAC,EACA,MAAAC,EACA,cAzEoB,MAAOC,GAAkD,CAC7EF,EAAU,MAAQ,GAClBC,EAAM,MAAQ,KAEd,GAAI,CACF,MAAME,EAAW,MAAM,MAAM,yBAAgD,CAC3E,OAAQ,OACR,KAAMD,CAAA,CACP,EAED,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAG1D,MAAMC,EAAwC,MAAMD,EAAS,KAAA,EAE7D,GAAI,CAACC,EAAO,SAAW,CAACA,EAAO,KAC7B,MAAM,IAAI,MAAMA,EAAO,OAAS,0BAA0B,EAG5D,OAAAL,EAAe,MAAQK,EAAO,KAC9BP,EAAS,MAAM,KAAKO,EAAO,IAAI,EAExBA,EAAO,IAChB,OAASC,EAAK,CACZ,MAAAJ,EAAM,MAAQI,aAAe,MAAQA,EAAI,QAAU,yBAC7CA,CACR,QAAA,CACEL,EAAU,MAAQ,EACpB,CACF,EA4CE,mBA1CyB,MAAOM,GAA4D,CAC5FN,EAAU,MAAQ,GAClBC,EAAM,MAAQ,KAEd,GAAI,CACF,MAAME,EAAW,MAAM,MAAM,0BAAgDG,CAAoB,SAAS,EAE1G,GAAI,CAACH,EAAS,GACZ,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAG1D,MAAMC,EAAwC,MAAMD,EAAS,KAAA,EAE7D,GAAI,CAACC,EAAO,SAAW,CAACA,EAAO,KAC7B,MAAM,IAAI,MAAMA,EAAO,OAAS,gCAAgC,EAGlE,OAAAL,EAAe,MAAQK,EAAO,KAEvBA,EAAO,IAChB,OAASC,EAAK,CACZ,MAAAJ,EAAM,MAAQI,aAAe,MAAQA,EAAI,QAAU,yBAC7CA,CACR,QAAA,CACEL,EAAU,MAAQ,EACpB,CACF,EAiBE,WAfiB,IAAM,CACvBC,EAAM,MAAQ,IAChB,EAcE,oBAZ0B,IAAM,CAChCF,EAAe,MAAQ,IACzB,CAUE,CAEJ,CAAC"}